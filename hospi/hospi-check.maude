mod HOSPI-CHECK is
  protecting HOSPI-PREDS-TYPES .
  including MODEL-CHECKER .
  including LTL-SIMPLIFIER .

  ops P1 P2 P3 P4 P5 P6 P7 P8 P9 : -> Trm . 

  eq P1 = new* ['x1' 'x2' 'x3']('x3'{0} < True > . *('x1'{0}) < True > . 'x1'{0} < False > . nil |
                                           *('x3'{0})('z') . *('x2'{0})('x') . 'x2'{0}('w') . nil) .
  eq P2 = new* ['x1' 'x2' 'a'] ('x1'{0} < *('a'{0}) > . nil | (u ['X'] . *('x1'{0})('z') . 'x2'{0} < 'z'{0} > . rec('X')) |
                                    (u ['Y'] . *('x2'{0})('w') . 'x1'{0} < 'w'{0} > . rec('Y')) | 'a'{0} < True > . nil ) .
  eq P3 = new* ['z' 'x'] ('z'{0}< 'x'{0} > . *('x'{0})('v') . nil | *('z'{0})('t') . 't'{0} < True > . nil) .
  eq P4 = new*['x1' 'x2' 'x3' 'x4' 'x5' 'x6']
                            ('x2'{0} < True > . 'x1'{0}('w') . 'w'{0} < 'x4'{0} > . 'w'{0} < *('x4'{0}) > . nil |
                             *('x2'{0})('b') . *('x4'{0})('z') . 'x4'{0} < 'a'{0} > . nil |
                             *('x1'{0}) < 'x3'{0} > . *('x3'{0})('z') . *('x3'{0})('t') . 'z'{0} < 'a'{0} > . 't'{0}('c') . 'x5'{0} < True > . 'x6'{0} < False > . nil |
                              *('x6'{0})('a') . *('x5'{0})('b'). nil) .
  eq P5 = new*['x1' 'x2' 'x3' 'x4' 'x5']
              ('x1'{0} < 'x2'{0} > . (*('x2'{0}) >> { ('a' : 'x3'{0} < True > . 'x4'{0} < False > . *('x4'{0}) ('c') . nil) ;
                                                      ('b' : 'x3'{0} < False > . *('x5'{0}) < 'x4'{0} > . *('x4'{0})('c')  . nil) }) | 
              *('x1'{0}) ('z') . ('z'{0} << 'a' . *('x3'{0}) ('c') . nil) | 
              *('x1'{0}) ('w') . ('w'{0} << 'b' . *('x3'{0}) ('c') . 'x5'{0}('t') . 't'{0} < True > . nil)) .
  eq P6 = new* [('y1' 'x1' ) ('y2' 'x2')] ('x1'{0} < 'x2'{0} > . nil | *('x1'{0})('z') . 'z'{0} < True > . *('x2'{0}) ('w') . nil) .
  eq P7 = new* ['x1' 'x2' 'x3']
             ('x3'{0} < False > . *('x1'{0})('a') . *('x2'{0}) ('d') . nil |
              'x1'{0} < True > . nil | *('x3'{0})('c') . 'x2'{0} < False > . nil |
              'x2'{0} < True > . 'x1'{0} < False > . nil | *('x2'{0})('b') . nil) .
  eq P8 = new* ['x1' 'x2' 'x3']
             ('x3'{0} < False > . *('x1'{0})('a') . (u ['X'] . *('x2'{0}) ('d') . rec('X')) |
              'x1'{0} < True > . nil | *('x3'{0})('c') . 'x2'{0} < False > . nil |
              'x2'{0} < True > . 'x1'{0} < False > . nil) .

  eq P9 = new* ['k' 't' 'x' 'z' 'w' 'q' 'r'] ('x'{0} < lambda ('y') . ('y'{0} < True > . 'z'{0} ('a') . 'a'{0} < False > . 'y'{0} < True > . nil) > . *('w'{0}) ('b') . nil |
                                              *('x'{0})('R') . ('R'{0}{'w'{0}}) |
                                              't'{0} < 'k'{0} > . *('k'{0})('m')  . *('w'{0})('b') . 'q'{0} < True > . nil |
                                              *('t'{0})('c') . *('z'{0}) < 'c'{0} > . 'r'{0} < 12 > . nil) .

  vars x : Qid .
  var  nl : QidSet .

  op build-lock-formula : QidSet -> Formula .
  eq build-lock-formula(mt) = True .
  eq build-lock-formula(x nl) = [] (<> pwait(x{0}) -> <> psync(x{0})) /\ build-lock-formula(nl) .
endm