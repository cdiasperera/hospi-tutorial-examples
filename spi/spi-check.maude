load spi-preds
load model-checker
mod PISESSION-CHECK is
  protecting APIPREDS-TYPES .
  including MODEL-CHECKER .
  including LTL-SIMPLIFIER .

  ops P1 P2 P3 P4 P5 P6 P7 P8 : -> Trm .
  op lock-formula : -> Formula . 
  eq P1 = new* [ ('y1' 'x1' ) ('y2' 'x2') ('y3' 'x3')]('x3'{0} < True > . 'x1'{0} < True > . 'y1'{0} < False > . nil |
                                                          lin 'y3'{0}('z') . lin 'y2'{0}('x') . lin 'x2'{0}('w') . nil) .
  eq P2 = new* [('x1' 'y1') ('x2' 'y2') ('a' 'b')] ('x1'{0} < 'b'{0} > . nil | un 'y1'{0}('z') . 'x2'{0} < 'z'{0} > . nil |
                                                       un 'y2'{0}('w') . 'x1'{0} < 'w'{0} > . nil | 'a'{0} < True > . nil ) .
  eq P3 = new* [('z' 'w') ('x' 'y')]
             ('z'{0}< 'x'{0} > . lin 'y'{0}('v') . nil | lin 'w'{0}('t') . 't'{0} < True > . nil) .
  eq P4 = new*[('x1' 'y1') ('x2' 'y2') ('x3' 'y3') ('x4' 'y4') ('x5' 'y5') ('x6' 'y6')]
                                 ('x2'{0} < True > . un 'x1'{0}('w') . 'w'{0} < 'x4'{0} > . 'w'{0} < 'y4'{0} > . nil |
                                  lin 'y2'{0}('b') . lin 'y4'{0}('z') . 'x4'{0} < 'a'{0} > . nil |
                                  'y1'{0} < 'x3'{0} > . lin 'y3'{0}('z') . lin 'y3'{0}('t') . 'z'{0} < 'a'{0} > . lin 't'{0}('c') . 'x5'{0} < True > . 'x6'{0} < False > . nil |
                                  lin 'y6'{0}('a') . lin 'y5'{0}('b'). nil) . 
  eq P5 = new*[('x1' 'y1') ('x2' 'y2') ('x3' 'y3') ('x4' 'y4') ('x5' 'y5')]
                               ('x1'{0} < 'x2'{0} > .
                                 ('y2'{0} >> { ('a' : 'x3'{0} < True > . 'x4'{0} < False > . lin 'y4'{0} ('c') . nil)
                                               ('b' : 'x3'{0} < False > . 'y5'{0} < 'x4'{0} > . lin 'y4'{0}('c')  . nil) }) | 
                                un 'y1'{0}('z') . ('z'{0} << 'a' . lin 'y3'{0}('c') . nil) | 
                                lin 'y1'{0}('w') . ('w'{0} << 'b' . lin 'y3'{0}('c') . lin 'x5'{0}('t') . 't'{0} < True > . nil)) .
  eq P6 = new* [('y1' 'x1' ) ('y2' 'x2')]
             ('x1'{0} < 'x2'{0} > . nil | lin 'y1'{0}('z') . 'z'{0} < True > . lin 'y2'{0}('w') . nil) .
  eq P7 = new* [('y1' 'x1' ) ('y2' 'x2') ('y3' 'x3')]
             ('x3'{0} < False > . lin 'y1'{0}('a') . lin 'y2'{0} ('d') . nil |
              'x1'{0} < True > . nil | lin 'y3'{0}('c') . 'x2'{0} < False > . nil |
              'x2'{0} < True > . 'x1'{0} < False > . nil | lin 'y2'{0}('b') . nil) .
  eq P8 = new* [('y1' 'x1' ) ('y2' 'x2') ('y3' 'x3')]
             ('x3'{0} < False > . lin 'y1'{0}('a') . un 'y2'{0} ('d') . nil |
              'x1'{0} < True > . nil | lin 'y3'{0}('c') . 'x2'{0} < False > . nil |
              'x2'{0} < True > . 'x1'{0} < False > . nil) .

  vars x y : Qid .
  var  nl : QidSet .

  op build-lock-formula : QidSet -> Formula .
  eq build-lock-formula(mt) = True .
  eq build-lock-formula((x y) nl) = [] (<> pwait(x{0}, y{0}) -> <> psync(x{0}, y{0})) /\ build-lock-formula(nl) .
endm